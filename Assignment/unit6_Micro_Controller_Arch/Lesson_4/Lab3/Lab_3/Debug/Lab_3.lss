
Lab_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b6  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00000f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  0000122c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000388  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000201  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_1>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_2>
   c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  64:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:

void GPIO_INIT(void)
{
	
	//Configure the Bit_2 at Port D to be input EXTI 0
	DDRD &= ~(1<<2);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8b 7f       	andi	r24, 0xFB	; 251
  70:	81 bb       	out	0x11, r24	; 17
	
	//Configure the Bit_3 at Port D to be input EXTI 1
	DDRD &= ~(1<<3);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	87 7f       	andi	r24, 0xF7	; 247
  76:	81 bb       	out	0x11, r24	; 17
	
	//Configure the Bit_2 at Port b to be input EXTI 2
	DDRB &= ~(1<<2);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	87 bb       	out	0x17, r24	; 23
	
	//Configure the Bit_0 at Port 0 to be output for EXTI 0
	DDRA |= (1<<0);
  7e:	8a b3       	in	r24, 0x1a	; 26
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8a bb       	out	0x1a, r24	; 26
	
	//Configure the Bit_0 at Port 1 to be output for EXTI 1
	DDRA |= (1<<1);
  84:	8a b3       	in	r24, 0x1a	; 26
  86:	82 60       	ori	r24, 0x02	; 2
  88:	8a bb       	out	0x1a, r24	; 26
	
	//Configure the Bit_0 at Port 2 to be output for EXTI 2
	DDRA |= (1<<2);
  8a:	8a b3       	in	r24, 0x1a	; 26
  8c:	84 60       	ori	r24, 0x04	; 4
  8e:	8a bb       	out	0x1a, r24	; 26
  90:	08 95       	ret

00000092 <EXTI_INIT>:
}

void EXTI_INIT(void)
{
	//Configure the EXTI 0 to be triggered with any logical change
	MCUCR |= (0B01 << 0);
  92:	85 b7       	in	r24, 0x35	; 53
  94:	81 60       	ori	r24, 0x01	; 1
  96:	85 bf       	out	0x35, r24	; 53
	
	//Configure the EXTI 1 to be triggered with rising edge
	MCUCR |= (0B11 << 2);
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8c 60       	ori	r24, 0x0C	; 12
  9c:	85 bf       	out	0x35, r24	; 53

	//Configure the EXTI 2 to be triggered with falling edge
	MCUCSR &= ~(1<< 6);
  9e:	84 b7       	in	r24, 0x34	; 52
  a0:	8f 7b       	andi	r24, 0xBF	; 191
  a2:	84 bf       	out	0x34, r24	; 52
	
	//Enable the global interrupt bit at the status register
	SREG |= (1<<7);
  a4:	8f b7       	in	r24, 0x3f	; 63
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8f bf       	out	0x3f, r24	; 63
	
	//Enable the interrupt for the EXTI 0
	GICR |= (1<<6);
  aa:	8b b7       	in	r24, 0x3b	; 59
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	8b bf       	out	0x3b, r24	; 59
	
	//Enable the interrupt for the EXTI 1
	GICR |= (1<<7);
  b0:	8b b7       	in	r24, 0x3b	; 59
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	8b bf       	out	0x3b, r24	; 59
	
	//Enable the interrupt for the EXTI 2
	GICR |= (1<<5);
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	8b bf       	out	0x3b, r24	; 59
  bc:	08 95       	ret

000000be <main>:
}

int main(void)
{
    GPIO_INIT();
  be:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>
	EXTI_INIT();
  c2:	0e 94 49 00 	call	0x92	; 0x92 <EXTI_INIT>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x8>

000000c8 <__vector_1>:
    }
}


ISR(INT0_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	3f 93       	push	r19
  d6:	8f 93       	push	r24
  d8:	9f 93       	push	r25
	//The flag Bit of EXTI 0 will be cleared by hardware
	
	//Toggle the output at pin_0 at port A
	PORTA ^= (1<<0);
  da:	9b b3       	in	r25, 0x1b	; 27
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	98 27       	eor	r25, r24
  e0:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	3d e0       	ldi	r19, 0x0D	; 13
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	30 40       	sbci	r19, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__vector_1+0x20>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <__vector_1+0x2a>
  f2:	00 00       	nop
	_delay_ms(1000);
	PORTA ^= (1<<0);
  f4:	9b b3       	in	r25, 0x1b	; 27
  f6:	89 27       	eor	r24, r25
  f8:	8b bb       	out	0x1b, r24	; 27
	
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	3f 91       	pop	r19
 100:	2f 91       	pop	r18
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <__vector_2>:


//void EXT_INT1(void)
ISR(INT1_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	3f 93       	push	r19
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
	//The flag Bit of EXTI 1 will be cleared by hardware
	
	//Toggle the output at pin_1 at port A
	PORTA ^= (1<<1);
 11e:	9b b3       	in	r25, 0x1b	; 27
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	98 27       	eor	r25, r24
 124:	9b bb       	out	0x1b, r25	; 27
 126:	2f e3       	ldi	r18, 0x3F	; 63
 128:	3d e0       	ldi	r19, 0x0D	; 13
 12a:	93 e0       	ldi	r25, 0x03	; 3
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	30 40       	sbci	r19, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <__vector_2+0x20>
 134:	00 c0       	rjmp	.+0      	; 0x136 <__vector_2+0x2a>
 136:	00 00       	nop
	_delay_ms(1000);
	PORTA ^= (1<<1);
 138:	9b b3       	in	r25, 0x1b	; 27
 13a:	89 27       	eor	r24, r25
 13c:	8b bb       	out	0x1b, r24	; 27
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_3>:

ISR(INT2_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	//The flag Bit of EXTI 2 will be cleared by hardware
	
	//Toggle the output at pin_2 at port A
	PORTA ^= (1<<2);
 162:	9b b3       	in	r25, 0x1b	; 27
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	98 27       	eor	r25, r24
 168:	9b bb       	out	0x1b, r25	; 27
 16a:	2f e3       	ldi	r18, 0x3F	; 63
 16c:	3d e0       	ldi	r19, 0x0D	; 13
 16e:	93 e0       	ldi	r25, 0x03	; 3
 170:	21 50       	subi	r18, 0x01	; 1
 172:	30 40       	sbci	r19, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <__vector_3+0x20>
 178:	00 c0       	rjmp	.+0      	; 0x17a <__vector_3+0x2a>
 17a:	00 00       	nop
	_delay_ms(1000);
	PORTA ^= (1<<2);
 17c:	9b b3       	in	r25, 0x1b	; 27
 17e:	89 27       	eor	r24, r25
 180:	8b bb       	out	0x1b, r24	; 27
	
}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
