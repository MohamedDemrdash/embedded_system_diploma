
Lab_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000648  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000820  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025f  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000378  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_INIT>:
#include <avr/interrupt.h>

void GPIO_INIT(void)
{
	//Configure the Bit_3 at Port D to be input (INT1)
	DDRD &= ~(1<<3);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	87 7f       	andi	r24, 0xF7	; 247
  70:	81 bb       	out	0x11, r24	; 17
	
	//Configure the Bit_0 at Port B to be output for the led
	DDRB |= (1<<0);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	81 60       	ori	r24, 0x01	; 1
  76:	87 bb       	out	0x17, r24	; 23
  78:	08 95       	ret

0000007a <EXTI_INIT>:
}

void EXTI_INIT(void)
{
	//Configure the EXTI 1 to be triggered with rising edge
	MCUCR |= (0B11 << 2);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	8c 60       	ori	r24, 0x0C	; 12
  7e:	85 bf       	out	0x35, r24	; 53

	//Enable the global interrupt bit at the status register
	SREG |= (1<<7);
  80:	8f b7       	in	r24, 0x3f	; 63
  82:	80 68       	ori	r24, 0x80	; 128
  84:	8f bf       	out	0x3f, r24	; 63
	
	//Enable the interrupt for the EXTI 1
	GICR |= (1<<7);
  86:	8b b7       	in	r24, 0x3b	; 59
  88:	80 68       	ori	r24, 0x80	; 128
  8a:	8b bf       	out	0x3b, r24	; 59
  8c:	08 95       	ret

0000008e <main>:
	
}

int main(void)
{
    GPIO_INIT();
  8e:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_INIT>
	EXTI_INIT();
  92:	0e 94 3d 00 	call	0x7a	; 0x7a <EXTI_INIT>
  96:	ff cf       	rjmp	.-2      	; 0x96 <main+0x8>

00000098 <__vector_2>:



//void EXT_INT1(void)
ISR(INT1_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	//The flag Bit of EXTI 1 will be cleared by hardware
	
	//Toggle the output at pin_0 at port B
	PORTB ^= (1<<0);
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	98 27       	eor	r25, r24
  b0:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f e3       	ldi	r18, 0x3F	; 63
  b4:	3d e0       	ldi	r19, 0x0D	; 13
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <__vector_2+0x20>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <__vector_2+0x2a>
  c2:	00 00       	nop
	_delay_ms(1000);
	PORTB ^= (1<<0);
  c4:	98 b3       	in	r25, 0x18	; 24
  c6:	89 27       	eor	r24, r25
  c8:	88 bb       	out	0x18, r24	; 24
	
}
  ca:	9f 91       	pop	r25
  cc:	8f 91       	pop	r24
  ce:	3f 91       	pop	r19
  d0:	2f 91       	pop	r18
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
