
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000382  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00001bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6c  00000000  00000000  00002341  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000059c  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f48  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	2f 01       	movw	r4, r30
  56:	48 01       	movw	r8, r16
  58:	61 01       	movw	r12, r2
  5a:	7a 01       	movw	r14, r20
  5c:	92 01       	movw	r18, r4
  5e:	92 01       	movw	r18, r4
  60:	92 01       	movw	r18, r4
  62:	92 01       	movw	r18, r4
  64:	92 01       	movw	r18, r4
  66:	92 01       	movw	r18, r4
  68:	92 01       	movw	r18, r4
  6a:	92 01       	movw	r18, r4
  6c:	92 01       	movw	r18, r4
  6e:	92 01       	movw	r18, r4
  70:	92 01       	movw	r18, r4
  72:	92 01       	movw	r18, r4
  74:	92 01       	movw	r18, r4
  76:	92 01       	movw	r18, r4
  78:	92 01       	movw	r18, r4
  7a:	92 01       	movw	r18, r4
  7c:	92 01       	movw	r18, r4
  7e:	92 01       	movw	r18, r4
  80:	92 01       	movw	r18, r4
  82:	92 01       	movw	r18, r4
  84:	92 01       	movw	r18, r4
  86:	92 01       	movw	r18, r4
  88:	92 01       	movw	r18, r4
  8a:	92 01       	movw	r18, r4
  8c:	92 01       	movw	r18, r4
  8e:	92 01       	movw	r18, r4
  90:	92 01       	movw	r18, r4
  92:	92 01       	movw	r18, r4
  94:	2f 01       	movw	r4, r30
  96:	48 01       	movw	r8, r16
  98:	61 01       	movw	r12, r2
  9a:	7a 01       	movw	r14, r20
  9c:	9e 01       	movw	r18, r28
  9e:	a0 01       	movw	r20, r0
  a0:	a2 01       	movw	r20, r4
  a2:	a4 01       	movw	r20, r8
  a4:	a5 01       	movw	r20, r10
  a6:	a5 01       	movw	r20, r10
  a8:	a5 01       	movw	r20, r10
  aa:	a5 01       	movw	r20, r10
  ac:	a5 01       	movw	r20, r10
  ae:	a5 01       	movw	r20, r10
  b0:	a5 01       	movw	r20, r10
  b2:	a5 01       	movw	r20, r10
  b4:	a5 01       	movw	r20, r10
  b6:	a5 01       	movw	r20, r10
  b8:	a5 01       	movw	r20, r10
  ba:	a5 01       	movw	r20, r10
  bc:	a5 01       	movw	r20, r10
  be:	a5 01       	movw	r20, r10
  c0:	a5 01       	movw	r20, r10
  c2:	a5 01       	movw	r20, r10
  c4:	a5 01       	movw	r20, r10
  c6:	a5 01       	movw	r20, r10
  c8:	a5 01       	movw	r20, r10
  ca:	a5 01       	movw	r20, r10
  cc:	a5 01       	movw	r20, r10
  ce:	a5 01       	movw	r20, r10
  d0:	a5 01       	movw	r20, r10
  d2:	a5 01       	movw	r20, r10
  d4:	a5 01       	movw	r20, r10
  d6:	a5 01       	movw	r20, r10
  d8:	a5 01       	movw	r20, r10
  da:	a5 01       	movw	r20, r10
  dc:	9e 01       	movw	r18, r28
  de:	a0 01       	movw	r20, r0
  e0:	a2 01       	movw	r20, r4
  e2:	a4 01       	movw	r20, r8
  e4:	b1 01       	movw	r22, r2
  e6:	b3 01       	movw	r22, r6
  e8:	b5 01       	movw	r22, r10
  ea:	b7 01       	movw	r22, r14
  ec:	b8 01       	movw	r22, r16
  ee:	b8 01       	movw	r22, r16
  f0:	b8 01       	movw	r22, r16
  f2:	b8 01       	movw	r22, r16
  f4:	b8 01       	movw	r22, r16
  f6:	b8 01       	movw	r22, r16
  f8:	b8 01       	movw	r22, r16
  fa:	b8 01       	movw	r22, r16
  fc:	b8 01       	movw	r22, r16
  fe:	b8 01       	movw	r22, r16
 100:	b8 01       	movw	r22, r16
 102:	b8 01       	movw	r22, r16
 104:	b8 01       	movw	r22, r16
 106:	b8 01       	movw	r22, r16
 108:	b8 01       	movw	r22, r16
 10a:	b8 01       	movw	r22, r16
 10c:	b8 01       	movw	r22, r16
 10e:	b8 01       	movw	r22, r16
 110:	b8 01       	movw	r22, r16
 112:	b8 01       	movw	r22, r16
 114:	b8 01       	movw	r22, r16
 116:	b8 01       	movw	r22, r16
 118:	b8 01       	movw	r22, r16
 11a:	b8 01       	movw	r22, r16
 11c:	b8 01       	movw	r22, r16
 11e:	b8 01       	movw	r22, r16
 120:	b8 01       	movw	r22, r16
 122:	b8 01       	movw	r22, r16
 124:	b1 01       	movw	r22, r2
 126:	b3 01       	movw	r22, r6
 128:	b5 01       	movw	r22, r10
 12a:	b7 01       	movw	r22, r14

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 1c 01 	call	0x238	; 0x238 <main>
 13c:	0c 94 bf 01 	jmp	0x37e	; 0x37e <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <App_init>:
#include "../EUCAL/BUTTON Driver/BUTTON_interface.h"
#include "application.h"

void App_init(void)
{
	LED_InitPort('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_InitPort>
 14a:	08 95       	ret

0000014c <App_start>:

void App_start(void)
{
	while(1)
	{
			LED_Converge_Diverge('A',250);		
 14c:	4a ef       	ldi	r20, 0xFA	; 250
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 b9 00 	call	0x172	; 0x172 <LED_Converge_Diverge>
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <App_start>

0000015c <LED_InitPort>:
	for (pin_num = 0;pin_num <= 7; pin_num++ )
	{
		DIO_write_pin(port,pin_num,LOW);
		_delay_ms(250);
	}
}
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	0e 94 93 01 	call	0x326	; 0x326 <DIO_set_port_dir>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 a6 01 	call	0x34c	; 0x34c <DIO_write_port>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LED_Converge_Diverge>:

void LED_Converge_Diverge(uint8_t port,uint32_t delay)
{
 172:	0f 93       	push	r16
 174:	1f 93       	push	r17
 176:	cf 93       	push	r28
 178:	df 93       	push	r29
 17a:	c8 2f       	mov	r28, r24
	int8_t pin_num;
	for (pin_num = 0;pin_num <= 3; pin_num++)
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		DIO_write_pin(port,pin_num-1,LOW);
		DIO_write_pin(port,pin_num,HIGH);
		DIO_write_pin(port,8-pin_num,LOW);
 17e:	08 e0       	ldi	r16, 0x08	; 8
		DIO_write_pin(port,7-pin_num,HIGH);
 180:	17 e0       	ldi	r17, 0x07	; 7
void LED_Converge_Diverge(uint8_t port,uint32_t delay)
{
	int8_t pin_num;
	for (pin_num = 0;pin_num <= 3; pin_num++)
	{
		DIO_write_pin(port,pin_num-1,LOW);
 182:	6f ef       	ldi	r22, 0xFF	; 255
 184:	6d 0f       	add	r22, r29
 186:	40 e0       	ldi	r20, 0x00	; 0
 188:	8c 2f       	mov	r24, r28
 18a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,pin_num,HIGH);
 18e:	41 e0       	ldi	r20, 0x01	; 1
 190:	6d 2f       	mov	r22, r29
 192:	8c 2f       	mov	r24, r28
 194:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,8-pin_num,LOW);
 198:	60 2f       	mov	r22, r16
 19a:	6d 1b       	sub	r22, r29
 19c:	40 e0       	ldi	r20, 0x00	; 0
 19e:	8c 2f       	mov	r24, r28
 1a0:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,7-pin_num,HIGH);
 1a4:	61 2f       	mov	r22, r17
 1a6:	6d 1b       	sub	r22, r29
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	8c 2f       	mov	r24, r28
 1ac:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	83 e2       	ldi	r24, 0x23	; 35
 1b2:	94 ef       	ldi	r25, 0xF4	; 244
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LED_Converge_Diverge+0x42>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LED_Converge_Diverge+0x48>
 1ba:	00 00       	nop
 1bc:	df 5f       	subi	r29, 0xFF	; 255
}

void LED_Converge_Diverge(uint8_t port,uint32_t delay)
{
	int8_t pin_num;
	for (pin_num = 0;pin_num <= 3; pin_num++)
 1be:	d4 30       	cpi	r29, 0x04	; 4
 1c0:	01 f7       	brne	.-64     	; 0x182 <LED_Converge_Diverge+0x10>
		DIO_write_pin(port,pin_num,HIGH);
		DIO_write_pin(port,8-pin_num,LOW);
		DIO_write_pin(port,7-pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,3,LOW);
 1c2:	40 e0       	ldi	r20, 0x00	; 0
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	8c 2f       	mov	r24, r28
 1c8:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
	DIO_write_pin(port,3,LOW);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	8c 2f       	mov	r24, r28
 1d2:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
	for (pin_num = 3;pin_num >= 0; pin_num--)
 1d6:	d3 e0       	ldi	r29, 0x03	; 3
	{
		DIO_write_pin(port,pin_num+1,LOW);
		DIO_write_pin(port,6-pin_num,LOW);
 1d8:	06 e0       	ldi	r16, 0x06	; 6
		DIO_write_pin(port,pin_num,HIGH);
		DIO_write_pin(port,7-pin_num,HIGH);
 1da:	17 e0       	ldi	r17, 0x07	; 7
	}
	DIO_write_pin(port,3,LOW);
	DIO_write_pin(port,3,LOW);
	for (pin_num = 3;pin_num >= 0; pin_num--)
	{
		DIO_write_pin(port,pin_num+1,LOW);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	6d 0f       	add	r22, r29
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,6-pin_num,LOW);
 1e8:	60 2f       	mov	r22, r16
 1ea:	6d 1b       	sub	r22, r29
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,pin_num,HIGH);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	6d 2f       	mov	r22, r29
 1f8:	8c 2f       	mov	r24, r28
 1fa:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
		DIO_write_pin(port,7-pin_num,HIGH);
 1fe:	61 2f       	mov	r22, r17
 200:	6d 1b       	sub	r22, r29
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
 20a:	83 e2       	ldi	r24, 0x23	; 35
 20c:	94 ef       	ldi	r25, 0xF4	; 244
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <LED_Converge_Diverge+0x9c>
 212:	00 c0       	rjmp	.+0      	; 0x214 <LED_Converge_Diverge+0xa2>
 214:	00 00       	nop
 216:	d1 50       	subi	r29, 0x01	; 1
 218:	08 f7       	brcc	.-62     	; 0x1dc <LED_Converge_Diverge+0x6a>
		_delay_ms(250);
	}
	DIO_write_pin(port,0,LOW);
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	8c 2f       	mov	r24, r28
 220:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
	DIO_write_pin(port,7,LOW);
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	67 e0       	ldi	r22, 0x07	; 7
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 23 01 	call	0x246	; 0x246 <DIO_write_pin>
}
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	1f 91       	pop	r17
 234:	0f 91       	pop	r16
 236:	08 95       	ret

00000238 <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 238:	0e 94 a2 00 	call	0x144	; 0x144 <App_init>
	
	App_start();
 23c:	0e 94 a6 00 	call	0x14c	; 0x14c <App_start>
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret

00000246 <DIO_write_pin>:
		case 'd':
		val = READ_BIT(PIND,pin);
		break;
	}
	return val;
}
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	e1 54       	subi	r30, 0x41	; 65
 24c:	f1 09       	sbc	r31, r1
 24e:	e4 32       	cpi	r30, 0x24	; 36
 250:	f1 05       	cpc	r31, r1
 252:	08 f0       	brcs	.+2      	; 0x256 <DIO_write_pin+0x10>
 254:	67 c0       	rjmp	.+206    	; 0x324 <DIO_write_pin+0xde>
 256:	e6 5d       	subi	r30, 0xD6	; 214
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	0c 94 b9 01 	jmp	0x372	; 0x372 <__tablejump2__>
 25e:	44 23       	and	r20, r20
 260:	59 f0       	breq	.+22     	; 0x278 <DIO_write_pin+0x32>
 262:	2b b3       	in	r18, 0x1b	; 27
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_write_pin+0x28>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_write_pin+0x24>
 272:	82 2b       	or	r24, r18
 274:	8b bb       	out	0x1b, r24	; 27
 276:	08 95       	ret
 278:	2b b3       	in	r18, 0x1b	; 27
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write_pin+0x3e>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write_pin+0x3a>
 288:	80 95       	com	r24
 28a:	82 23       	and	r24, r18
 28c:	8b bb       	out	0x1b, r24	; 27
 28e:	08 95       	ret
 290:	44 23       	and	r20, r20
 292:	59 f0       	breq	.+22     	; 0x2aa <DIO_write_pin+0x64>
 294:	28 b3       	in	r18, 0x18	; 24
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write_pin+0x5a>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write_pin+0x56>
 2a4:	82 2b       	or	r24, r18
 2a6:	88 bb       	out	0x18, r24	; 24
 2a8:	08 95       	ret
 2aa:	28 b3       	in	r18, 0x18	; 24
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_write_pin+0x70>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_write_pin+0x6c>
 2ba:	80 95       	com	r24
 2bc:	82 23       	and	r24, r18
 2be:	88 bb       	out	0x18, r24	; 24
 2c0:	08 95       	ret
 2c2:	44 23       	and	r20, r20
 2c4:	59 f0       	breq	.+22     	; 0x2dc <DIO_write_pin+0x96>
 2c6:	25 b3       	in	r18, 0x15	; 21
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_write_pin+0x8c>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	6a 95       	dec	r22
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_write_pin+0x88>
 2d6:	82 2b       	or	r24, r18
 2d8:	85 bb       	out	0x15, r24	; 21
 2da:	08 95       	ret
 2dc:	25 b3       	in	r18, 0x15	; 21
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_write_pin+0xa2>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	6a 95       	dec	r22
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_write_pin+0x9e>
 2ec:	80 95       	com	r24
 2ee:	82 23       	and	r24, r18
 2f0:	85 bb       	out	0x15, r24	; 21
 2f2:	08 95       	ret
 2f4:	44 23       	and	r20, r20
 2f6:	59 f0       	breq	.+22     	; 0x30e <DIO_write_pin+0xc8>
 2f8:	22 b3       	in	r18, 0x12	; 18
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_write_pin+0xbe>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_write_pin+0xba>
 308:	82 2b       	or	r24, r18
 30a:	82 bb       	out	0x12, r24	; 18
 30c:	08 95       	ret
 30e:	22 b3       	in	r18, 0x12	; 18
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_write_pin+0xd4>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	6a 95       	dec	r22
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_write_pin+0xd0>
 31e:	80 95       	com	r24
 320:	82 23       	and	r24, r18
 322:	82 bb       	out	0x12, r24	; 18
 324:	08 95       	ret

00000326 <DIO_set_port_dir>:

void DIO_set_port_dir(uint8_t port,uint8_t val)
{
	switch(port)
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	fc 01       	movw	r30, r24
 32a:	e1 54       	subi	r30, 0x41	; 65
 32c:	f1 09       	sbc	r31, r1
 32e:	e4 32       	cpi	r30, 0x24	; 36
 330:	f1 05       	cpc	r31, r1
 332:	58 f4       	brcc	.+22     	; 0x34a <DIO_set_port_dir+0x24>
 334:	e2 5b       	subi	r30, 0xB2	; 178
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	0c 94 b9 01 	jmp	0x372	; 0x372 <__tablejump2__>
	{
		case 'A':
		case 'a':
			DDRA = val;
 33c:	6a bb       	out	0x1a, r22	; 26
			break;
 33e:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = val;
 340:	67 bb       	out	0x17, r22	; 23
			break;
 342:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = val;
 344:	64 bb       	out	0x14, r22	; 20
			break;
 346:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = val;
 348:	61 bb       	out	0x11, r22	; 17
 34a:	08 95       	ret

0000034c <DIO_write_port>:
	}
}

void DIO_write_port(uint8_t port,uint8_t val)
{
	switch(port)
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	fc 01       	movw	r30, r24
 350:	e1 54       	subi	r30, 0x41	; 65
 352:	f1 09       	sbc	r31, r1
 354:	e4 32       	cpi	r30, 0x24	; 36
 356:	f1 05       	cpc	r31, r1
 358:	58 f4       	brcc	.+22     	; 0x370 <DIO_write_port+0x24>
 35a:	ee 58       	subi	r30, 0x8E	; 142
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	0c 94 b9 01 	jmp	0x372	; 0x372 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA = val;
 362:	6b bb       	out	0x1b, r22	; 27
		break;
 364:	08 95       	ret
		case 'B':
		case 'b':
		PORTB = val;
 366:	68 bb       	out	0x18, r22	; 24
		break;
 368:	08 95       	ret
		case 'C':
		case 'c':
		PORTB = val;
 36a:	68 bb       	out	0x18, r22	; 24
		break;
 36c:	08 95       	ret
		case 'D':
		case 'd':
		PORTD = val;
 36e:	62 bb       	out	0x12, r22	; 18
 370:	08 95       	ret

00000372 <__tablejump2__>:
 372:	ee 0f       	add	r30, r30
 374:	ff 1f       	adc	r31, r31
 376:	05 90       	lpm	r0, Z+
 378:	f4 91       	lpm	r31, Z
 37a:	e0 2d       	mov	r30, r0
 37c:	09 94       	ijmp

0000037e <_exit>:
 37e:	f8 94       	cli

00000380 <__stop_program>:
 380:	ff cf       	rjmp	.-2      	; 0x380 <__stop_program>
