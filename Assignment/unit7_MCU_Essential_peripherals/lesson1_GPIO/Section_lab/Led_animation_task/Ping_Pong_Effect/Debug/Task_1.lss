
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00001b7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6c  00000000  00000000  000022e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000595  00000000  00000000  00002fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f48  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000044b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	04 01       	movw	r0, r8
  56:	1d 01       	movw	r2, r26
  58:	36 01       	movw	r6, r12
  5a:	4f 01       	movw	r8, r30
  5c:	67 01       	movw	r12, r14
  5e:	67 01       	movw	r12, r14
  60:	67 01       	movw	r12, r14
  62:	67 01       	movw	r12, r14
  64:	67 01       	movw	r12, r14
  66:	67 01       	movw	r12, r14
  68:	67 01       	movw	r12, r14
  6a:	67 01       	movw	r12, r14
  6c:	67 01       	movw	r12, r14
  6e:	67 01       	movw	r12, r14
  70:	67 01       	movw	r12, r14
  72:	67 01       	movw	r12, r14
  74:	67 01       	movw	r12, r14
  76:	67 01       	movw	r12, r14
  78:	67 01       	movw	r12, r14
  7a:	67 01       	movw	r12, r14
  7c:	67 01       	movw	r12, r14
  7e:	67 01       	movw	r12, r14
  80:	67 01       	movw	r12, r14
  82:	67 01       	movw	r12, r14
  84:	67 01       	movw	r12, r14
  86:	67 01       	movw	r12, r14
  88:	67 01       	movw	r12, r14
  8a:	67 01       	movw	r12, r14
  8c:	67 01       	movw	r12, r14
  8e:	67 01       	movw	r12, r14
  90:	67 01       	movw	r12, r14
  92:	67 01       	movw	r12, r14
  94:	04 01       	movw	r0, r8
  96:	1d 01       	movw	r2, r26
  98:	36 01       	movw	r6, r12
  9a:	4f 01       	movw	r8, r30
  9c:	73 01       	movw	r14, r6
  9e:	75 01       	movw	r14, r10
  a0:	77 01       	movw	r14, r14
  a2:	79 01       	movw	r14, r18
  a4:	7a 01       	movw	r14, r20
  a6:	7a 01       	movw	r14, r20
  a8:	7a 01       	movw	r14, r20
  aa:	7a 01       	movw	r14, r20
  ac:	7a 01       	movw	r14, r20
  ae:	7a 01       	movw	r14, r20
  b0:	7a 01       	movw	r14, r20
  b2:	7a 01       	movw	r14, r20
  b4:	7a 01       	movw	r14, r20
  b6:	7a 01       	movw	r14, r20
  b8:	7a 01       	movw	r14, r20
  ba:	7a 01       	movw	r14, r20
  bc:	7a 01       	movw	r14, r20
  be:	7a 01       	movw	r14, r20
  c0:	7a 01       	movw	r14, r20
  c2:	7a 01       	movw	r14, r20
  c4:	7a 01       	movw	r14, r20
  c6:	7a 01       	movw	r14, r20
  c8:	7a 01       	movw	r14, r20
  ca:	7a 01       	movw	r14, r20
  cc:	7a 01       	movw	r14, r20
  ce:	7a 01       	movw	r14, r20
  d0:	7a 01       	movw	r14, r20
  d2:	7a 01       	movw	r14, r20
  d4:	7a 01       	movw	r14, r20
  d6:	7a 01       	movw	r14, r20
  d8:	7a 01       	movw	r14, r20
  da:	7a 01       	movw	r14, r20
  dc:	73 01       	movw	r14, r6
  de:	75 01       	movw	r14, r10
  e0:	77 01       	movw	r14, r14
  e2:	79 01       	movw	r14, r18
  e4:	86 01       	movw	r16, r12
  e6:	88 01       	movw	r16, r16
  e8:	8a 01       	movw	r16, r20
  ea:	8c 01       	movw	r16, r24
  ec:	8d 01       	movw	r16, r26
  ee:	8d 01       	movw	r16, r26
  f0:	8d 01       	movw	r16, r26
  f2:	8d 01       	movw	r16, r26
  f4:	8d 01       	movw	r16, r26
  f6:	8d 01       	movw	r16, r26
  f8:	8d 01       	movw	r16, r26
  fa:	8d 01       	movw	r16, r26
  fc:	8d 01       	movw	r16, r26
  fe:	8d 01       	movw	r16, r26
 100:	8d 01       	movw	r16, r26
 102:	8d 01       	movw	r16, r26
 104:	8d 01       	movw	r16, r26
 106:	8d 01       	movw	r16, r26
 108:	8d 01       	movw	r16, r26
 10a:	8d 01       	movw	r16, r26
 10c:	8d 01       	movw	r16, r26
 10e:	8d 01       	movw	r16, r26
 110:	8d 01       	movw	r16, r26
 112:	8d 01       	movw	r16, r26
 114:	8d 01       	movw	r16, r26
 116:	8d 01       	movw	r16, r26
 118:	8d 01       	movw	r16, r26
 11a:	8d 01       	movw	r16, r26
 11c:	8d 01       	movw	r16, r26
 11e:	8d 01       	movw	r16, r26
 120:	8d 01       	movw	r16, r26
 122:	8d 01       	movw	r16, r26
 124:	86 01       	movw	r16, r12
 126:	88 01       	movw	r16, r16
 128:	8a 01       	movw	r16, r20
 12a:	8c 01       	movw	r16, r24

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
 13c:	0c 94 94 01 	jmp	0x328	; 0x328 <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <App_init>:
#include "../EUCAL/BUTTON Driver/BUTTON_interface.h"
#include "application.h"

void App_init(void)
{
	LED_InitPort('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_InitPort>
 14a:	08 95       	ret

0000014c <App_start>:

void App_start(void)
{
	while(1)
	{
			LED_PingPong('A',250);		
 14c:	4a ef       	ldi	r20, 0xFA	; 250
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 b9 00 	call	0x172	; 0x172 <LED_PingPong>
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <App_start>

0000015c <LED_InitPort>:
		DIO_write_pin(port,7-pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,0,LOW);
	DIO_write_pin(port,7,LOW);
}
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	0e 94 68 01 	call	0x2d0	; 0x2d0 <DIO_set_port_dir>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DIO_write_port>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LED_PingPong>:

void LED_PingPong(uint8_t port,uint32_t delay)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	d8 2f       	mov	r29, r24
	int8_t pin_num;
	for (pin_num = 0;pin_num <= 6; pin_num++ )
 178:	c0 e0       	ldi	r28, 0x00	; 0
	{
		DIO_write_pin(port,pin_num-1,LOW);
 17a:	6f ef       	ldi	r22, 0xFF	; 255
 17c:	6c 0f       	add	r22, r28
 17e:	40 e0       	ldi	r20, 0x00	; 0
 180:	8d 2f       	mov	r24, r29
 182:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
		DIO_write_pin(port,pin_num,HIGH);
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	6c 2f       	mov	r22, r28
 18a:	8d 2f       	mov	r24, r29
 18c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 190:	83 e2       	ldi	r24, 0x23	; 35
 192:	94 ef       	ldi	r25, 0xF4	; 244
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LED_PingPong+0x22>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LED_PingPong+0x28>
 19a:	00 00       	nop
 19c:	cf 5f       	subi	r28, 0xFF	; 255
}

void LED_PingPong(uint8_t port,uint32_t delay)
{
	int8_t pin_num;
	for (pin_num = 0;pin_num <= 6; pin_num++ )
 19e:	c7 30       	cpi	r28, 0x07	; 7
 1a0:	61 f7       	brne	.-40     	; 0x17a <LED_PingPong+0x8>
	{
		DIO_write_pin(port,pin_num-1,LOW);
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,6,LOW);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	66 e0       	ldi	r22, 0x06	; 6
 1a6:	8d 2f       	mov	r24, r29
 1a8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
	for (pin_num = 7;pin_num >= 1; pin_num-- )
	{
		DIO_write_pin(port,pin_num+1,LOW);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	6c 0f       	add	r22, r28
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	8d 2f       	mov	r24, r29
 1b4:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
		DIO_write_pin(port,pin_num,HIGH);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	6c 2f       	mov	r22, r28
 1bc:	8d 2f       	mov	r24, r29
 1be:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
 1c2:	83 e2       	ldi	r24, 0x23	; 35
 1c4:	94 ef       	ldi	r25, 0xF4	; 244
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <LED_PingPong+0x54>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <LED_PingPong+0x5a>
 1cc:	00 00       	nop
 1ce:	c1 50       	subi	r28, 0x01	; 1
		DIO_write_pin(port,pin_num-1,LOW);
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,6,LOW);
	for (pin_num = 7;pin_num >= 1; pin_num-- )
 1d0:	69 f7       	brne	.-38     	; 0x1ac <LED_PingPong+0x3a>
	{
		DIO_write_pin(port,pin_num+1,LOW);
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,1,LOW);
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	8d 2f       	mov	r24, r29
 1d8:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <DIO_write_pin>
}
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 1e2:	0e 94 a2 00 	call	0x144	; 0x144 <App_init>
	
	App_start();
 1e6:	0e 94 a6 00 	call	0x14c	; 0x14c <App_start>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret

000001f0 <DIO_write_pin>:
		case 'd':
		val = READ_BIT(PIND,pin);
		break;
	}
	return val;
}
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	e1 54       	subi	r30, 0x41	; 65
 1f6:	f1 09       	sbc	r31, r1
 1f8:	e4 32       	cpi	r30, 0x24	; 36
 1fa:	f1 05       	cpc	r31, r1
 1fc:	08 f0       	brcs	.+2      	; 0x200 <DIO_write_pin+0x10>
 1fe:	67 c0       	rjmp	.+206    	; 0x2ce <DIO_write_pin+0xde>
 200:	e6 5d       	subi	r30, 0xD6	; 214
 202:	ff 4f       	sbci	r31, 0xFF	; 255
 204:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__tablejump2__>
 208:	44 23       	and	r20, r20
 20a:	59 f0       	breq	.+22     	; 0x222 <DIO_write_pin+0x32>
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_write_pin+0x28>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	6a 95       	dec	r22
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_write_pin+0x24>
 21c:	82 2b       	or	r24, r18
 21e:	8b bb       	out	0x1b, r24	; 27
 220:	08 95       	ret
 222:	2b b3       	in	r18, 0x1b	; 27
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_write_pin+0x3e>
 22a:	88 0f       	add	r24, r24
 22c:	99 1f       	adc	r25, r25
 22e:	6a 95       	dec	r22
 230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_write_pin+0x3a>
 232:	80 95       	com	r24
 234:	82 23       	and	r24, r18
 236:	8b bb       	out	0x1b, r24	; 27
 238:	08 95       	ret
 23a:	44 23       	and	r20, r20
 23c:	59 f0       	breq	.+22     	; 0x254 <DIO_write_pin+0x64>
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_write_pin+0x5a>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_write_pin+0x56>
 24e:	82 2b       	or	r24, r18
 250:	88 bb       	out	0x18, r24	; 24
 252:	08 95       	ret
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_write_pin+0x70>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_write_pin+0x6c>
 264:	80 95       	com	r24
 266:	82 23       	and	r24, r18
 268:	88 bb       	out	0x18, r24	; 24
 26a:	08 95       	ret
 26c:	44 23       	and	r20, r20
 26e:	59 f0       	breq	.+22     	; 0x286 <DIO_write_pin+0x96>
 270:	25 b3       	in	r18, 0x15	; 21
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_write_pin+0x8c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_write_pin+0x88>
 280:	82 2b       	or	r24, r18
 282:	85 bb       	out	0x15, r24	; 21
 284:	08 95       	ret
 286:	25 b3       	in	r18, 0x15	; 21
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_write_pin+0xa2>
 28e:	88 0f       	add	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_write_pin+0x9e>
 296:	80 95       	com	r24
 298:	82 23       	and	r24, r18
 29a:	85 bb       	out	0x15, r24	; 21
 29c:	08 95       	ret
 29e:	44 23       	and	r20, r20
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <DIO_write_pin+0xc8>
 2a2:	22 b3       	in	r18, 0x12	; 18
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_write_pin+0xbe>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_write_pin+0xba>
 2b2:	82 2b       	or	r24, r18
 2b4:	82 bb       	out	0x12, r24	; 18
 2b6:	08 95       	ret
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_write_pin+0xd4>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_write_pin+0xd0>
 2c8:	80 95       	com	r24
 2ca:	82 23       	and	r24, r18
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret

000002d0 <DIO_set_port_dir>:

void DIO_set_port_dir(uint8_t port,uint8_t val)
{
	switch(port)
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	fc 01       	movw	r30, r24
 2d4:	e1 54       	subi	r30, 0x41	; 65
 2d6:	f1 09       	sbc	r31, r1
 2d8:	e4 32       	cpi	r30, 0x24	; 36
 2da:	f1 05       	cpc	r31, r1
 2dc:	58 f4       	brcc	.+22     	; 0x2f4 <DIO_set_port_dir+0x24>
 2de:	e2 5b       	subi	r30, 0xB2	; 178
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__tablejump2__>
	{
		case 'A':
		case 'a':
			DDRA = val;
 2e6:	6a bb       	out	0x1a, r22	; 26
			break;
 2e8:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = val;
 2ea:	67 bb       	out	0x17, r22	; 23
			break;
 2ec:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = val;
 2ee:	64 bb       	out	0x14, r22	; 20
			break;
 2f0:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = val;
 2f2:	61 bb       	out	0x11, r22	; 17
 2f4:	08 95       	ret

000002f6 <DIO_write_port>:
	}
}

void DIO_write_port(uint8_t port,uint8_t val)
{
	switch(port)
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	fc 01       	movw	r30, r24
 2fa:	e1 54       	subi	r30, 0x41	; 65
 2fc:	f1 09       	sbc	r31, r1
 2fe:	e4 32       	cpi	r30, 0x24	; 36
 300:	f1 05       	cpc	r31, r1
 302:	58 f4       	brcc	.+22     	; 0x31a <DIO_write_port+0x24>
 304:	ee 58       	subi	r30, 0x8E	; 142
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA = val;
 30c:	6b bb       	out	0x1b, r22	; 27
		break;
 30e:	08 95       	ret
		case 'B':
		case 'b':
		PORTB = val;
 310:	68 bb       	out	0x18, r22	; 24
		break;
 312:	08 95       	ret
		case 'C':
		case 'c':
		PORTB = val;
 314:	68 bb       	out	0x18, r22	; 24
		break;
 316:	08 95       	ret
		case 'D':
		case 'd':
		PORTD = val;
 318:	62 bb       	out	0x12, r22	; 18
 31a:	08 95       	ret

0000031c <__tablejump2__>:
 31c:	ee 0f       	add	r30, r30
 31e:	ff 1f       	adc	r31, r31
 320:	05 90       	lpm	r0, Z+
 322:	f4 91       	lpm	r31, Z
 324:	e0 2d       	mov	r30, r0
 326:	09 94       	ijmp

00000328 <_exit>:
 328:	f8 94       	cli

0000032a <__stop_program>:
 32a:	ff cf       	rjmp	.-2      	; 0x32a <__stop_program>
