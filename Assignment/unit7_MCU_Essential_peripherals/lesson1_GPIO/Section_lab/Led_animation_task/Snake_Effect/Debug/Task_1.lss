
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6c  00000000  00000000  000022c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000591  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f48  00000000  00000000  0000353d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00004485  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	f0 00       	.word	0x00f0	; ????
  56:	09 01       	movw	r0, r18
  58:	22 01       	movw	r4, r4
  5a:	3b 01       	movw	r6, r22
  5c:	53 01       	movw	r10, r6
  5e:	53 01       	movw	r10, r6
  60:	53 01       	movw	r10, r6
  62:	53 01       	movw	r10, r6
  64:	53 01       	movw	r10, r6
  66:	53 01       	movw	r10, r6
  68:	53 01       	movw	r10, r6
  6a:	53 01       	movw	r10, r6
  6c:	53 01       	movw	r10, r6
  6e:	53 01       	movw	r10, r6
  70:	53 01       	movw	r10, r6
  72:	53 01       	movw	r10, r6
  74:	53 01       	movw	r10, r6
  76:	53 01       	movw	r10, r6
  78:	53 01       	movw	r10, r6
  7a:	53 01       	movw	r10, r6
  7c:	53 01       	movw	r10, r6
  7e:	53 01       	movw	r10, r6
  80:	53 01       	movw	r10, r6
  82:	53 01       	movw	r10, r6
  84:	53 01       	movw	r10, r6
  86:	53 01       	movw	r10, r6
  88:	53 01       	movw	r10, r6
  8a:	53 01       	movw	r10, r6
  8c:	53 01       	movw	r10, r6
  8e:	53 01       	movw	r10, r6
  90:	53 01       	movw	r10, r6
  92:	53 01       	movw	r10, r6
  94:	f0 00       	.word	0x00f0	; ????
  96:	09 01       	movw	r0, r18
  98:	22 01       	movw	r4, r4
  9a:	3b 01       	movw	r6, r22
  9c:	5f 01       	movw	r10, r30
  9e:	61 01       	movw	r12, r2
  a0:	63 01       	movw	r12, r6
  a2:	65 01       	movw	r12, r10
  a4:	66 01       	movw	r12, r12
  a6:	66 01       	movw	r12, r12
  a8:	66 01       	movw	r12, r12
  aa:	66 01       	movw	r12, r12
  ac:	66 01       	movw	r12, r12
  ae:	66 01       	movw	r12, r12
  b0:	66 01       	movw	r12, r12
  b2:	66 01       	movw	r12, r12
  b4:	66 01       	movw	r12, r12
  b6:	66 01       	movw	r12, r12
  b8:	66 01       	movw	r12, r12
  ba:	66 01       	movw	r12, r12
  bc:	66 01       	movw	r12, r12
  be:	66 01       	movw	r12, r12
  c0:	66 01       	movw	r12, r12
  c2:	66 01       	movw	r12, r12
  c4:	66 01       	movw	r12, r12
  c6:	66 01       	movw	r12, r12
  c8:	66 01       	movw	r12, r12
  ca:	66 01       	movw	r12, r12
  cc:	66 01       	movw	r12, r12
  ce:	66 01       	movw	r12, r12
  d0:	66 01       	movw	r12, r12
  d2:	66 01       	movw	r12, r12
  d4:	66 01       	movw	r12, r12
  d6:	66 01       	movw	r12, r12
  d8:	66 01       	movw	r12, r12
  da:	66 01       	movw	r12, r12
  dc:	5f 01       	movw	r10, r30
  de:	61 01       	movw	r12, r2
  e0:	63 01       	movw	r12, r6
  e2:	65 01       	movw	r12, r10
  e4:	72 01       	movw	r14, r4
  e6:	74 01       	movw	r14, r8
  e8:	76 01       	movw	r14, r12
  ea:	78 01       	movw	r14, r16
  ec:	79 01       	movw	r14, r18
  ee:	79 01       	movw	r14, r18
  f0:	79 01       	movw	r14, r18
  f2:	79 01       	movw	r14, r18
  f4:	79 01       	movw	r14, r18
  f6:	79 01       	movw	r14, r18
  f8:	79 01       	movw	r14, r18
  fa:	79 01       	movw	r14, r18
  fc:	79 01       	movw	r14, r18
  fe:	79 01       	movw	r14, r18
 100:	79 01       	movw	r14, r18
 102:	79 01       	movw	r14, r18
 104:	79 01       	movw	r14, r18
 106:	79 01       	movw	r14, r18
 108:	79 01       	movw	r14, r18
 10a:	79 01       	movw	r14, r18
 10c:	79 01       	movw	r14, r18
 10e:	79 01       	movw	r14, r18
 110:	79 01       	movw	r14, r18
 112:	79 01       	movw	r14, r18
 114:	79 01       	movw	r14, r18
 116:	79 01       	movw	r14, r18
 118:	79 01       	movw	r14, r18
 11a:	79 01       	movw	r14, r18
 11c:	79 01       	movw	r14, r18
 11e:	79 01       	movw	r14, r18
 120:	79 01       	movw	r14, r18
 122:	79 01       	movw	r14, r18
 124:	72 01       	movw	r14, r4
 126:	74 01       	movw	r14, r8
 128:	76 01       	movw	r14, r12
 12a:	78 01       	movw	r14, r16

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
 13c:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <App_init>:
#include "../EUCAL/BUTTON Driver/BUTTON_interface.h"
#include "application.h"

void App_init(void)
{
	LED_InitPort('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_InitPort>
 14a:	08 95       	ret

0000014c <App_start>:

void App_start(void)
{
	while(1)
	{
			LED_SnakeEffect('A',250);		
 14c:	4a ef       	ldi	r20, 0xFA	; 250
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 b9 00 	call	0x172	; 0x172 <LED_SnakeEffect>
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <App_start>

0000015c <LED_InitPort>:
		DIO_write_pin(port,pin_num+1,LOW);
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,1,LOW);
}
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_set_port_dir>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 67 01 	call	0x2ce	; 0x2ce <DIO_write_port>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LED_SnakeEffect>:

void LED_SnakeEffect(uint8_t port,uint32_t delay)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	d8 2f       	mov	r29, r24
	uint8_t pin_num;
	for (pin_num = 0;pin_num <= 7; pin_num++ )
 178:	c0 e0       	ldi	r28, 0x00	; 0
	{
		DIO_write_pin(port,pin_num,HIGH);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	6c 2f       	mov	r22, r28
 17e:	8d 2f       	mov	r24, r29
 180:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	83 e2       	ldi	r24, 0x23	; 35
 186:	94 ef       	ldi	r25, 0xF4	; 244
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LED_SnakeEffect+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LED_SnakeEffect+0x1c>
 18e:	00 00       	nop
}

void LED_SnakeEffect(uint8_t port,uint32_t delay)
{
	uint8_t pin_num;
	for (pin_num = 0;pin_num <= 7; pin_num++ )
 190:	cf 5f       	subi	r28, 0xFF	; 255
 192:	c8 30       	cpi	r28, 0x08	; 8
 194:	91 f7       	brne	.-28     	; 0x17a <LED_SnakeEffect+0x8>
 196:	c0 e0       	ldi	r28, 0x00	; 0
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	for (pin_num = 0;pin_num <= 7; pin_num++ )
	{
		DIO_write_pin(port,pin_num,LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	6c 2f       	mov	r22, r28
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <DIO_write_pin>
 1a2:	83 e2       	ldi	r24, 0x23	; 35
 1a4:	94 ef       	ldi	r25, 0xF4	; 244
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LED_SnakeEffect+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LED_SnakeEffect+0x3a>
 1ac:	00 00       	nop
	for (pin_num = 0;pin_num <= 7; pin_num++ )
	{
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	for (pin_num = 0;pin_num <= 7; pin_num++ )
 1ae:	cf 5f       	subi	r28, 0xFF	; 255
 1b0:	c8 30       	cpi	r28, 0x08	; 8
 1b2:	91 f7       	brne	.-28     	; 0x198 <LED_SnakeEffect+0x26>
	{
		DIO_write_pin(port,pin_num,LOW);
		_delay_ms(250);
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 1ba:	0e 94 a2 00 	call	0x144	; 0x144 <App_init>
	
	App_start();
 1be:	0e 94 a6 00 	call	0x14c	; 0x14c <App_start>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <DIO_write_pin>:
		case 'd':
		val = READ_BIT(PIND,pin);
		break;
	}
	return val;
}
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	e1 54       	subi	r30, 0x41	; 65
 1ce:	f1 09       	sbc	r31, r1
 1d0:	e4 32       	cpi	r30, 0x24	; 36
 1d2:	f1 05       	cpc	r31, r1
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <DIO_write_pin+0x10>
 1d6:	67 c0       	rjmp	.+206    	; 0x2a6 <DIO_write_pin+0xde>
 1d8:	e6 5d       	subi	r30, 0xD6	; 214
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__tablejump2__>
 1e0:	44 23       	and	r20, r20
 1e2:	59 f0       	breq	.+22     	; 0x1fa <DIO_write_pin+0x32>
 1e4:	2b b3       	in	r18, 0x1b	; 27
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write_pin+0x28>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write_pin+0x24>
 1f4:	82 2b       	or	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
 1fa:	2b b3       	in	r18, 0x1b	; 27
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_write_pin+0x3e>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_write_pin+0x3a>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
 212:	44 23       	and	r20, r20
 214:	59 f0       	breq	.+22     	; 0x22c <DIO_write_pin+0x64>
 216:	28 b3       	in	r18, 0x18	; 24
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_write_pin+0x5a>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_write_pin+0x56>
 226:	82 2b       	or	r24, r18
 228:	88 bb       	out	0x18, r24	; 24
 22a:	08 95       	ret
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_write_pin+0x70>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_write_pin+0x6c>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	88 bb       	out	0x18, r24	; 24
 242:	08 95       	ret
 244:	44 23       	and	r20, r20
 246:	59 f0       	breq	.+22     	; 0x25e <DIO_write_pin+0x96>
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_write_pin+0x8c>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_write_pin+0x88>
 258:	82 2b       	or	r24, r18
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	08 95       	ret
 25e:	25 b3       	in	r18, 0x15	; 21
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_write_pin+0xa2>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_write_pin+0x9e>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	85 bb       	out	0x15, r24	; 21
 274:	08 95       	ret
 276:	44 23       	and	r20, r20
 278:	59 f0       	breq	.+22     	; 0x290 <DIO_write_pin+0xc8>
 27a:	22 b3       	in	r18, 0x12	; 18
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write_pin+0xbe>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write_pin+0xba>
 28a:	82 2b       	or	r24, r18
 28c:	82 bb       	out	0x12, r24	; 18
 28e:	08 95       	ret
 290:	22 b3       	in	r18, 0x12	; 18
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_write_pin+0xd4>
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_write_pin+0xd0>
 2a0:	80 95       	com	r24
 2a2:	82 23       	and	r24, r18
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret

000002a8 <DIO_set_port_dir>:

void DIO_set_port_dir(uint8_t port,uint8_t val)
{
	switch(port)
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	e1 54       	subi	r30, 0x41	; 65
 2ae:	f1 09       	sbc	r31, r1
 2b0:	e4 32       	cpi	r30, 0x24	; 36
 2b2:	f1 05       	cpc	r31, r1
 2b4:	58 f4       	brcc	.+22     	; 0x2cc <DIO_set_port_dir+0x24>
 2b6:	e2 5b       	subi	r30, 0xB2	; 178
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__tablejump2__>
	{
		case 'A':
		case 'a':
			DDRA = val;
 2be:	6a bb       	out	0x1a, r22	; 26
			break;
 2c0:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = val;
 2c2:	67 bb       	out	0x17, r22	; 23
			break;
 2c4:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = val;
 2c6:	64 bb       	out	0x14, r22	; 20
			break;
 2c8:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = val;
 2ca:	61 bb       	out	0x11, r22	; 17
 2cc:	08 95       	ret

000002ce <DIO_write_port>:
	}
}

void DIO_write_port(uint8_t port,uint8_t val)
{
	switch(port)
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	e1 54       	subi	r30, 0x41	; 65
 2d4:	f1 09       	sbc	r31, r1
 2d6:	e4 32       	cpi	r30, 0x24	; 36
 2d8:	f1 05       	cpc	r31, r1
 2da:	58 f4       	brcc	.+22     	; 0x2f2 <DIO_write_port+0x24>
 2dc:	ee 58       	subi	r30, 0x8E	; 142
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA = val;
 2e4:	6b bb       	out	0x1b, r22	; 27
		break;
 2e6:	08 95       	ret
		case 'B':
		case 'b':
		PORTB = val;
 2e8:	68 bb       	out	0x18, r22	; 24
		break;
 2ea:	08 95       	ret
		case 'C':
		case 'c':
		PORTB = val;
 2ec:	68 bb       	out	0x18, r22	; 24
		break;
 2ee:	08 95       	ret
		case 'D':
		case 'd':
		PORTD = val;
 2f0:	62 bb       	out	0x12, r22	; 18
 2f2:	08 95       	ret

000002f4 <__tablejump2__>:
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	05 90       	lpm	r0, Z+
 2fa:	f4 91       	lpm	r31, Z
 2fc:	e0 2d       	mov	r30, r0
 2fe:	09 94       	ijmp

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
