
Task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000165f  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076e  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a6c  00000000  00000000  000022c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000027c  00000000  00000000  00002d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ed  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f48  00000000  00000000  00003499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000043e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
   4:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   8:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
   c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  10:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  14:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  18:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  1c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  20:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  24:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  28:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  2c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  30:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  38:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  3c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  40:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  44:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  48:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  4c:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  50:	0c 94 a0 00 	jmp	0x140	; 0x140 <__bad_interrupt>
  54:	ef 00       	.word	0x00ef	; ????
  56:	08 01       	movw	r0, r16
  58:	21 01       	movw	r4, r2
  5a:	3a 01       	movw	r6, r20
  5c:	52 01       	movw	r10, r4
  5e:	52 01       	movw	r10, r4
  60:	52 01       	movw	r10, r4
  62:	52 01       	movw	r10, r4
  64:	52 01       	movw	r10, r4
  66:	52 01       	movw	r10, r4
  68:	52 01       	movw	r10, r4
  6a:	52 01       	movw	r10, r4
  6c:	52 01       	movw	r10, r4
  6e:	52 01       	movw	r10, r4
  70:	52 01       	movw	r10, r4
  72:	52 01       	movw	r10, r4
  74:	52 01       	movw	r10, r4
  76:	52 01       	movw	r10, r4
  78:	52 01       	movw	r10, r4
  7a:	52 01       	movw	r10, r4
  7c:	52 01       	movw	r10, r4
  7e:	52 01       	movw	r10, r4
  80:	52 01       	movw	r10, r4
  82:	52 01       	movw	r10, r4
  84:	52 01       	movw	r10, r4
  86:	52 01       	movw	r10, r4
  88:	52 01       	movw	r10, r4
  8a:	52 01       	movw	r10, r4
  8c:	52 01       	movw	r10, r4
  8e:	52 01       	movw	r10, r4
  90:	52 01       	movw	r10, r4
  92:	52 01       	movw	r10, r4
  94:	ef 00       	.word	0x00ef	; ????
  96:	08 01       	movw	r0, r16
  98:	21 01       	movw	r4, r2
  9a:	3a 01       	movw	r6, r20
  9c:	5e 01       	movw	r10, r28
  9e:	60 01       	movw	r12, r0
  a0:	62 01       	movw	r12, r4
  a2:	64 01       	movw	r12, r8
  a4:	65 01       	movw	r12, r10
  a6:	65 01       	movw	r12, r10
  a8:	65 01       	movw	r12, r10
  aa:	65 01       	movw	r12, r10
  ac:	65 01       	movw	r12, r10
  ae:	65 01       	movw	r12, r10
  b0:	65 01       	movw	r12, r10
  b2:	65 01       	movw	r12, r10
  b4:	65 01       	movw	r12, r10
  b6:	65 01       	movw	r12, r10
  b8:	65 01       	movw	r12, r10
  ba:	65 01       	movw	r12, r10
  bc:	65 01       	movw	r12, r10
  be:	65 01       	movw	r12, r10
  c0:	65 01       	movw	r12, r10
  c2:	65 01       	movw	r12, r10
  c4:	65 01       	movw	r12, r10
  c6:	65 01       	movw	r12, r10
  c8:	65 01       	movw	r12, r10
  ca:	65 01       	movw	r12, r10
  cc:	65 01       	movw	r12, r10
  ce:	65 01       	movw	r12, r10
  d0:	65 01       	movw	r12, r10
  d2:	65 01       	movw	r12, r10
  d4:	65 01       	movw	r12, r10
  d6:	65 01       	movw	r12, r10
  d8:	65 01       	movw	r12, r10
  da:	65 01       	movw	r12, r10
  dc:	5e 01       	movw	r10, r28
  de:	60 01       	movw	r12, r0
  e0:	62 01       	movw	r12, r4
  e2:	64 01       	movw	r12, r8
  e4:	71 01       	movw	r14, r2
  e6:	73 01       	movw	r14, r6
  e8:	75 01       	movw	r14, r10
  ea:	77 01       	movw	r14, r14
  ec:	78 01       	movw	r14, r16
  ee:	78 01       	movw	r14, r16
  f0:	78 01       	movw	r14, r16
  f2:	78 01       	movw	r14, r16
  f4:	78 01       	movw	r14, r16
  f6:	78 01       	movw	r14, r16
  f8:	78 01       	movw	r14, r16
  fa:	78 01       	movw	r14, r16
  fc:	78 01       	movw	r14, r16
  fe:	78 01       	movw	r14, r16
 100:	78 01       	movw	r14, r16
 102:	78 01       	movw	r14, r16
 104:	78 01       	movw	r14, r16
 106:	78 01       	movw	r14, r16
 108:	78 01       	movw	r14, r16
 10a:	78 01       	movw	r14, r16
 10c:	78 01       	movw	r14, r16
 10e:	78 01       	movw	r14, r16
 110:	78 01       	movw	r14, r16
 112:	78 01       	movw	r14, r16
 114:	78 01       	movw	r14, r16
 116:	78 01       	movw	r14, r16
 118:	78 01       	movw	r14, r16
 11a:	78 01       	movw	r14, r16
 11c:	78 01       	movw	r14, r16
 11e:	78 01       	movw	r14, r16
 120:	78 01       	movw	r14, r16
 122:	78 01       	movw	r14, r16
 124:	71 01       	movw	r14, r2
 126:	73 01       	movw	r14, r6
 128:	75 01       	movw	r14, r10
 12a:	77 01       	movw	r14, r14

0000012c <__ctors_end>:
 12c:	11 24       	eor	r1, r1
 12e:	1f be       	out	0x3f, r1	; 63
 130:	cf e5       	ldi	r28, 0x5F	; 95
 132:	d8 e0       	ldi	r29, 0x08	; 8
 134:	de bf       	out	0x3e, r29	; 62
 136:	cd bf       	out	0x3d, r28	; 61
 138:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <main>
 13c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000140 <__bad_interrupt>:
 140:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000144 <App_init>:
#include "../EUCAL/BUTTON Driver/BUTTON_interface.h"
#include "application.h"

void App_init(void)
{
	LED_InitPort('A');
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_InitPort>
 14a:	08 95       	ret

0000014c <App_start>:

void App_start(void)
{
	while(1)
	{
			LED_GO_BACK('A',250);		
 14c:	4a ef       	ldi	r20, 0xFA	; 250
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 b9 00 	call	0x172	; 0x172 <LED_GO_BACK>
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <App_start>

0000015c <LED_InitPort>:
		DIO_write_pin(port,7-pin_num,HIGH);
		_delay_ms(250);
	}
	DIO_write_pin(port,0,LOW);
	DIO_write_pin(port,7,LOW);
}
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	6f ef       	ldi	r22, 0xFF	; 255
 162:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_set_port_dir>
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	8c 2f       	mov	r24, r28
 16a:	0e 94 66 01 	call	0x2cc	; 0x2cc <DIO_write_port>
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <LED_GO_BACK>:

void LED_GO_BACK(uint8_t port,uint32_t delay)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	d8 2f       	mov	r29, r24
	sint8_t pin_num;
	for (pin_num = 0;pin_num <= 7; pin_num++ )
 178:	c0 e0       	ldi	r28, 0x00	; 0
	{
		DIO_write_pin(port,pin_num,HIGH);
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	6c 2f       	mov	r22, r28
 17e:	8d 2f       	mov	r24, r29
 180:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_write_pin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	83 e2       	ldi	r24, 0x23	; 35
 186:	94 ef       	ldi	r25, 0xF4	; 244
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LED_GO_BACK+0x16>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LED_GO_BACK+0x1c>
 18e:	00 00       	nop
 190:	cf 5f       	subi	r28, 0xFF	; 255
}

void LED_GO_BACK(uint8_t port,uint32_t delay)
{
	sint8_t pin_num;
	for (pin_num = 0;pin_num <= 7; pin_num++ )
 192:	c8 30       	cpi	r28, 0x08	; 8
 194:	91 f7       	brne	.-28     	; 0x17a <LED_GO_BACK+0x8>
 196:	c7 e0       	ldi	r28, 0x07	; 7
		DIO_write_pin(port,pin_num,HIGH);
		_delay_ms(250);
	}
	for (pin_num = 7;pin_num >= 0; pin_num-- )
	{
		DIO_write_pin(port,pin_num,LOW);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	6c 2f       	mov	r22, r28
 19c:	8d 2f       	mov	r24, r29
 19e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_write_pin>
 1a2:	83 e2       	ldi	r24, 0x23	; 35
 1a4:	94 ef       	ldi	r25, 0xF4	; 244
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <LED_GO_BACK+0x34>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <LED_GO_BACK+0x3a>
 1ac:	00 00       	nop
 1ae:	c1 50       	subi	r28, 0x01	; 1
 1b0:	98 f7       	brcc	.-26     	; 0x198 <LED_GO_BACK+0x26>
		_delay_ms(250);
	}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <main>:

#include "Application/application.h"

int main(void)
{
	App_init();
 1b8:	0e 94 a2 00 	call	0x144	; 0x144 <App_init>
	
	App_start();
 1bc:	0e 94 a6 00 	call	0x14c	; 0x14c <App_start>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <DIO_write_pin>:
		case 'd':
		val = READ_BIT(PIND,pin);
		break;
	}
	return val;
}
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	e1 54       	subi	r30, 0x41	; 65
 1cc:	f1 09       	sbc	r31, r1
 1ce:	e4 32       	cpi	r30, 0x24	; 36
 1d0:	f1 05       	cpc	r31, r1
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <DIO_write_pin+0x10>
 1d4:	67 c0       	rjmp	.+206    	; 0x2a4 <DIO_write_pin+0xde>
 1d6:	e6 5d       	subi	r30, 0xD6	; 214
 1d8:	ff 4f       	sbci	r31, 0xFF	; 255
 1da:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__tablejump2__>
 1de:	44 23       	and	r20, r20
 1e0:	59 f0       	breq	.+22     	; 0x1f8 <DIO_write_pin+0x32>
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_write_pin+0x28>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_write_pin+0x24>
 1f2:	82 2b       	or	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	08 95       	ret
 1f8:	2b b3       	in	r18, 0x1b	; 27
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_write_pin+0x3e>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_write_pin+0x3a>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	8b bb       	out	0x1b, r24	; 27
 20e:	08 95       	ret
 210:	44 23       	and	r20, r20
 212:	59 f0       	breq	.+22     	; 0x22a <DIO_write_pin+0x64>
 214:	28 b3       	in	r18, 0x18	; 24
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_write_pin+0x5a>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_write_pin+0x56>
 224:	82 2b       	or	r24, r18
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	28 b3       	in	r18, 0x18	; 24
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_write_pin+0x70>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_write_pin+0x6c>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	88 bb       	out	0x18, r24	; 24
 240:	08 95       	ret
 242:	44 23       	and	r20, r20
 244:	59 f0       	breq	.+22     	; 0x25c <DIO_write_pin+0x96>
 246:	25 b3       	in	r18, 0x15	; 21
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_write_pin+0x8c>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_write_pin+0x88>
 256:	82 2b       	or	r24, r18
 258:	85 bb       	out	0x15, r24	; 21
 25a:	08 95       	ret
 25c:	25 b3       	in	r18, 0x15	; 21
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_write_pin+0xa2>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_write_pin+0x9e>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	85 bb       	out	0x15, r24	; 21
 272:	08 95       	ret
 274:	44 23       	and	r20, r20
 276:	59 f0       	breq	.+22     	; 0x28e <DIO_write_pin+0xc8>
 278:	22 b3       	in	r18, 0x12	; 18
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_write_pin+0xbe>
 280:	88 0f       	add	r24, r24
 282:	99 1f       	adc	r25, r25
 284:	6a 95       	dec	r22
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_write_pin+0xba>
 288:	82 2b       	or	r24, r18
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret
 28e:	22 b3       	in	r18, 0x12	; 18
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_write_pin+0xd4>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_write_pin+0xd0>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	82 bb       	out	0x12, r24	; 18
 2a4:	08 95       	ret

000002a6 <DIO_set_port_dir>:

void DIO_set_port_dir(uint8_t port,uint8_t val)
{
	switch(port)
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	fc 01       	movw	r30, r24
 2aa:	e1 54       	subi	r30, 0x41	; 65
 2ac:	f1 09       	sbc	r31, r1
 2ae:	e4 32       	cpi	r30, 0x24	; 36
 2b0:	f1 05       	cpc	r31, r1
 2b2:	58 f4       	brcc	.+22     	; 0x2ca <DIO_set_port_dir+0x24>
 2b4:	e2 5b       	subi	r30, 0xB2	; 178
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__tablejump2__>
	{
		case 'A':
		case 'a':
			DDRA = val;
 2bc:	6a bb       	out	0x1a, r22	; 26
			break;
 2be:	08 95       	ret
		case 'B':
		case 'b':
			DDRB = val;
 2c0:	67 bb       	out	0x17, r22	; 23
			break;
 2c2:	08 95       	ret
		case 'C':
		case 'c':
			DDRC = val;
 2c4:	64 bb       	out	0x14, r22	; 20
			break;
 2c6:	08 95       	ret
		case 'D':
		case 'd':
			DDRD = val;
 2c8:	61 bb       	out	0x11, r22	; 17
 2ca:	08 95       	ret

000002cc <DIO_write_port>:
	}
}

void DIO_write_port(uint8_t port,uint8_t val)
{
	switch(port)
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	fc 01       	movw	r30, r24
 2d0:	e1 54       	subi	r30, 0x41	; 65
 2d2:	f1 09       	sbc	r31, r1
 2d4:	e4 32       	cpi	r30, 0x24	; 36
 2d6:	f1 05       	cpc	r31, r1
 2d8:	58 f4       	brcc	.+22     	; 0x2f0 <DIO_write_port+0x24>
 2da:	ee 58       	subi	r30, 0x8E	; 142
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__tablejump2__>
	{
		case 'A':
		case 'a':
		PORTA = val;
 2e2:	6b bb       	out	0x1b, r22	; 27
		break;
 2e4:	08 95       	ret
		case 'B':
		case 'b':
		PORTB = val;
 2e6:	68 bb       	out	0x18, r22	; 24
		break;
 2e8:	08 95       	ret
		case 'C':
		case 'c':
		PORTB = val;
 2ea:	68 bb       	out	0x18, r22	; 24
		break;
 2ec:	08 95       	ret
		case 'D':
		case 'd':
		PORTD = val;
 2ee:	62 bb       	out	0x12, r22	; 18
 2f0:	08 95       	ret

000002f2 <__tablejump2__>:
 2f2:	ee 0f       	add	r30, r30
 2f4:	ff 1f       	adc	r31, r31
 2f6:	05 90       	lpm	r0, Z+
 2f8:	f4 91       	lpm	r31, Z
 2fa:	e0 2d       	mov	r30, r0
 2fc:	09 94       	ijmp

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
