
task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000498  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000101b  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bb  00000000  00000000  000016a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008df  00000000  00000000  0000205e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000018c  00000000  00000000  00002940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000530  00000000  00000000  00002acc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000447  00000000  00000000  00002ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003443  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 23 01 	call	0x246	; 0x246 <main>
  7a:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <App_init>:
SSD_Type SSD2 ={SSD_COMMON_CATHODE,SSD_PORTD,SSD_PORTB,6};	
SW_Type SW1 = {SW_PORTC,0,SW_PULL_DOWN};
	
void App_init(void)
{
	SSD_voidInitialDataPort(SSD1);
  82:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SSD1>
  86:	0e 94 9b 00 	call	0x136	; 0x136 <SSD_voidInitialDataPort>
	SSD_voidInitialDataPort(SSD2);
  8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SSD2>
  8e:	0e 94 9b 00 	call	0x136	; 0x136 <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD2);
  92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SSD2>
  96:	0e 94 a1 00 	call	0x142	; 0x142 <SSD_voidEnable>
	SW_VoidInit(SW1);
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	0e 94 97 00 	call	0x12e	; 0x12e <SW_VoidInit>
  a2:	08 95       	ret

000000a4 <App_start>:
}

void App_start(void)
{
	uint8_t i =0 ;
  a4:	f1 2c       	mov	r15, r1
	while(1)
	{
		for(uint32_t j =0 ;j <= 40;j++)
		{
			
			SSD_voidSendNumber(SSD1,i%10);
  a6:	0f 2e       	mov	r0, r31
  a8:	fd ec       	ldi	r31, 0xCD	; 205
  aa:	ef 2e       	mov	r14, r31
  ac:	f0 2d       	mov	r31, r0
  ae:	fe 9c       	mul	r15, r14
  b0:	01 2d       	mov	r16, r1
  b2:	11 24       	eor	r1, r1
  b4:	10 2f       	mov	r17, r16
  b6:	16 95       	lsr	r17
  b8:	16 95       	lsr	r17
  ba:	16 95       	lsr	r17
  bc:	11 0f       	add	r17, r17
  be:	81 2f       	mov	r24, r17
  c0:	88 0f       	add	r24, r24
  c2:	88 0f       	add	r24, r24
  c4:	18 0f       	add	r17, r24
  c6:	8f 2d       	mov	r24, r15
  c8:	81 1b       	sub	r24, r17
  ca:	18 2f       	mov	r17, r24
			SSD_voidEnable(SSD1);
			_delay_ms(10);
			//SSD_voidSendNumber(SSD1,i%10);
			SSD_voidDisable(SSD1);
			SSD_voidSendNumber(SSD2,i/10);
  cc:	06 95       	lsr	r16
  ce:	06 95       	lsr	r16
  d0:	06 95       	lsr	r16
  d2:	c0 e0       	ldi	r28, 0x00	; 0
  d4:	d0 e0       	ldi	r29, 0x00	; 0
	while(1)
	{
		for(uint32_t j =0 ;j <= 40;j++)
		{
			
			SSD_voidSendNumber(SSD1,i%10);
  d6:	61 2f       	mov	r22, r17
  d8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SSD1>
  dc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SSD_voidSendNumber>
			SSD_voidEnable(SSD1);
  e0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SSD1>
  e4:	0e 94 a1 00 	call	0x142	; 0x142 <SSD_voidEnable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e8:	8f e1       	ldi	r24, 0x1F	; 31
  ea:	9e e4       	ldi	r25, 0x4E	; 78
  ec:	01 97       	sbiw	r24, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <App_start+0x48>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <App_start+0x4e>
  f2:	00 00       	nop
			_delay_ms(10);
			//SSD_voidSendNumber(SSD1,i%10);
			SSD_voidDisable(SSD1);
  f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <SSD1>
  f8:	0e 94 c9 00 	call	0x192	; 0x192 <SSD_voidDisable>
			SSD_voidSendNumber(SSD2,i/10);
  fc:	60 2f       	mov	r22, r16
  fe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SSD2>
 102:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <SSD_voidSendNumber>
			SSD_voidEnable(SSD2);
 106:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SSD2>
 10a:	0e 94 a1 00 	call	0x142	; 0x142 <SSD_voidEnable>
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <App_start+0x6e>
 116:	00 c0       	rjmp	.+0      	; 0x118 <App_start+0x74>
 118:	00 00       	nop
			_delay_ms(10);
			//SSD_voidSendNumber(SSD2,i/10);
			SSD_voidDisable(SSD2);
 11a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <SSD2>
 11e:	0e 94 c9 00 	call	0x192	; 0x192 <SSD_voidDisable>
 122:	21 96       	adiw	r28, 0x01	; 1
void App_start(void)
{
	uint8_t i =0 ;
	while(1)
	{
		for(uint32_t j =0 ;j <= 40;j++)
 124:	c9 32       	cpi	r28, 0x29	; 41
 126:	d1 05       	cpc	r29, r1
 128:	b1 f6       	brne	.-84     	; 0xd6 <App_start+0x32>
			_delay_ms(10);
			//SSD_voidSendNumber(SSD2,i/10);
			SSD_voidDisable(SSD2);

		}
			i++;
 12a:	f3 94       	inc	r15
	}
 12c:	c0 cf       	rjmp	.-128    	; 0xae <App_start+0xa>

0000012e <SW_VoidInit>:
#include "../../MCAL/DIO Driver/DIO_interface.h"

void SW_VoidInit(SW_Type SW)
{
	DIO_Type PIN = {SW.Port,SW.Pin,INPUT,LOW};
	DIO_VoidSetPinDir(PIN);
 12e:	8f 71       	andi	r24, 0x1F	; 31
 130:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_VoidSetPinDir>
 134:	08 95       	ret

00000136 <SSD_voidInitialDataPort>:



void SSD_voidInitialDataPort( SSD_Type SSD )
{
	DIO_VoidSetPortDir(SSD.DataPort,PORT_OUT);
 136:	86 95       	lsr	r24
 138:	6f ef       	ldi	r22, 0xFF	; 255
 13a:	83 70       	andi	r24, 0x03	; 3
 13c:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_VoidSetPortDir>
 140:	08 95       	ret

00000142 <SSD_voidEnable>:
}
void SSD_voidEnable( SSD_Type SSD)
{
 142:	cf 93       	push	r28
 144:	98 2f       	mov	r25, r24
 146:	96 95       	lsr	r25
 148:	96 95       	lsr	r25
 14a:	96 95       	lsr	r25
 14c:	93 70       	andi	r25, 0x03	; 3
 14e:	c8 2f       	mov	r28, r24
 150:	c2 95       	swap	r28
 152:	c6 95       	lsr	r28
 154:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 156:	80 fd       	sbrc	r24, 0
 158:	0c c0       	rjmp	.+24     	; 0x172 <SSD_voidEnable+0x30>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 15a:	cc 0f       	add	r28, r28
 15c:	cc 0f       	add	r28, r28
 15e:	c9 2b       	or	r28, r25
 160:	c0 62       	ori	r28, 0x20	; 32
 162:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);	
 16a:	8c 2f       	mov	r24, r28
 16c:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_VoidWritePin>
 170:	0e c0       	rjmp	.+28     	; 0x18e <SSD_voidEnable+0x4c>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 172:	8c 2f       	mov	r24, r28
 174:	88 0f       	add	r24, r24
 176:	88 0f       	add	r24, r24
 178:	c9 2f       	mov	r28, r25
 17a:	c3 70       	andi	r28, 0x03	; 3
 17c:	c8 2b       	or	r28, r24
 17e:	c0 62       	ori	r28, 0x20	; 32
 180:	c0 64       	ori	r28, 0x40	; 64
		DIO_VoidSetPinDir(PIN);
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 188:	8c 2f       	mov	r24, r28
 18a:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_VoidWritePin>
	}
}
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <SSD_voidDisable>:
void SSD_voidDisable( SSD_Type SSD)
{
 192:	cf 93       	push	r28
 194:	98 2f       	mov	r25, r24
 196:	96 95       	lsr	r25
 198:	96 95       	lsr	r25
 19a:	96 95       	lsr	r25
 19c:	93 70       	andi	r25, 0x03	; 3
 19e:	c8 2f       	mov	r28, r24
 1a0:	c2 95       	swap	r28
 1a2:	c6 95       	lsr	r28
 1a4:	c7 70       	andi	r28, 0x07	; 7
	if(SSD.Type == SSD_COMMON_CATHODE)
 1a6:	80 fd       	sbrc	r24, 0
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <SSD_voidDisable+0x30>
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,HIGH};
 1aa:	cc 0f       	add	r28, r28
 1ac:	cc 0f       	add	r28, r28
 1ae:	c9 2b       	or	r28, r25
 1b0:	c0 62       	ori	r28, 0x20	; 32
 1b2:	c0 64       	ori	r28, 0x40	; 64
		DIO_VoidSetPinDir(PIN);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_VoidWritePin>
 1c0:	0e c0       	rjmp	.+28     	; 0x1de <SSD_voidDisable+0x4c>
	}
	else if(SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_Type PIN = {SSD.EnablePort,SSD.EnablePin,OUTPUT,LOW};
 1c2:	8c 2f       	mov	r24, r28
 1c4:	88 0f       	add	r24, r24
 1c6:	88 0f       	add	r24, r24
 1c8:	c9 2f       	mov	r28, r25
 1ca:	c3 70       	andi	r28, 0x03	; 3
 1cc:	c8 2b       	or	r28, r24
 1ce:	c0 62       	ori	r28, 0x20	; 32
 1d0:	cf 7b       	andi	r28, 0xBF	; 191
		DIO_VoidSetPinDir(PIN);
 1d2:	8c 2f       	mov	r24, r28
 1d4:	0e 94 2a 01 	call	0x254	; 0x254 <DIO_VoidSetPinDir>
		DIO_VoidWritePin(PIN);
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_VoidWritePin>
	}
}
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <SSD_voidSendNumber>:
void SSD_voidSendNumber( SSD_Type SSD,uint8_t Number)
{
 1e2:	98 2f       	mov	r25, r24
 1e4:	96 95       	lsr	r25
 1e6:	93 70       	andi	r25, 0x03	; 3
	if (SSD.Type == SSD_COMMON_CATHODE)
 1e8:	80 fd       	sbrc	r24, 0
 1ea:	16 c0       	rjmp	.+44     	; 0x218 <SSD_voidSendNumber+0x36>
	{
		DIO_VoidWritePort(SSD.DataPort,Numbers[Number%10]);
 1ec:	8d ec       	ldi	r24, 0xCD	; 205
 1ee:	68 9f       	mul	r22, r24
 1f0:	81 2d       	mov	r24, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	86 95       	lsr	r24
 1f6:	86 95       	lsr	r24
 1f8:	86 95       	lsr	r24
 1fa:	88 0f       	add	r24, r24
 1fc:	28 2f       	mov	r18, r24
 1fe:	22 0f       	add	r18, r18
 200:	22 0f       	add	r18, r18
 202:	82 0f       	add	r24, r18
 204:	68 1b       	sub	r22, r24
 206:	e6 2f       	mov	r30, r22
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	ed 59       	subi	r30, 0x9D	; 157
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	60 81       	ld	r22, Z
 210:	89 2f       	mov	r24, r25
 212:	0e 94 3a 02 	call	0x474	; 0x474 <DIO_VoidWritePort>
 216:	08 95       	ret
	}
	else if (SSD.Type == SSD_COMMON_ANODE)
	{
		DIO_VoidWritePort(SSD.DataPort,~Numbers[Number%10]);
 218:	8d ec       	ldi	r24, 0xCD	; 205
 21a:	68 9f       	mul	r22, r24
 21c:	81 2d       	mov	r24, r1
 21e:	11 24       	eor	r1, r1
 220:	86 95       	lsr	r24
 222:	86 95       	lsr	r24
 224:	86 95       	lsr	r24
 226:	88 0f       	add	r24, r24
 228:	28 2f       	mov	r18, r24
 22a:	22 0f       	add	r18, r18
 22c:	22 0f       	add	r18, r18
 22e:	82 0f       	add	r24, r18
 230:	68 1b       	sub	r22, r24
 232:	e6 2f       	mov	r30, r22
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ed 59       	subi	r30, 0x9D	; 157
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	60 81       	ld	r22, Z
 23c:	60 95       	com	r22
 23e:	89 2f       	mov	r24, r25
 240:	0e 94 3a 02 	call	0x474	; 0x474 <DIO_VoidWritePort>
 244:	08 95       	ret

00000246 <main>:
#define F_CPU 8000000UL


int main(void)
{
	App_init();
 246:	0e 94 41 00 	call	0x82	; 0x82 <App_init>
	
	App_start();
 24a:	0e 94 52 00 	call	0xa4	; 0xa4 <App_start>
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	08 95       	ret

00000254 <DIO_VoidSetPinDir>:
		case DIO_PORTD :
			PIN.Val = READ_BIT(PIND,PIN.Num);
			break;
	}
	return PIN.Val;
}
 254:	98 2f       	mov	r25, r24
 256:	96 95       	lsr	r25
 258:	96 95       	lsr	r25
 25a:	97 70       	andi	r25, 0x07	; 7
 25c:	28 2f       	mov	r18, r24
 25e:	23 70       	andi	r18, 0x03	; 3
 260:	22 30       	cpi	r18, 0x02	; 2
 262:	f1 f1       	breq	.+124    	; 0x2e0 <DIO_VoidSetPinDir+0x8c>
 264:	08 f0       	brcs	.+2      	; 0x268 <DIO_VoidSetPinDir+0x14>
 266:	59 c0       	rjmp	.+178    	; 0x31a <DIO_VoidSetPinDir+0xc6>
 268:	21 30       	cpi	r18, 0x01	; 1
 26a:	e9 f0       	breq	.+58     	; 0x2a6 <DIO_VoidSetPinDir+0x52>
 26c:	85 ff       	sbrs	r24, 5
 26e:	0d c0       	rjmp	.+26     	; 0x28a <DIO_VoidSetPinDir+0x36>
 270:	4a b3       	in	r20, 0x1a	; 26
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_VoidSetPinDir+0x2a>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	9a 95       	dec	r25
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_VoidSetPinDir+0x26>
 282:	cb 01       	movw	r24, r22
 284:	84 2b       	or	r24, r20
 286:	8a bb       	out	0x1a, r24	; 26
 288:	08 95       	ret
 28a:	4a b3       	in	r20, 0x1a	; 26
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_VoidSetPinDir+0x44>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	9a 95       	dec	r25
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_VoidSetPinDir+0x40>
 29c:	cb 01       	movw	r24, r22
 29e:	80 95       	com	r24
 2a0:	84 23       	and	r24, r20
 2a2:	8a bb       	out	0x1a, r24	; 26
 2a4:	08 95       	ret
 2a6:	85 ff       	sbrs	r24, 5
 2a8:	0d c0       	rjmp	.+26     	; 0x2c4 <DIO_VoidSetPinDir+0x70>
 2aa:	47 b3       	in	r20, 0x17	; 23
 2ac:	21 e0       	ldi	r18, 0x01	; 1
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	b9 01       	movw	r22, r18
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_VoidSetPinDir+0x64>
 2b4:	66 0f       	add	r22, r22
 2b6:	77 1f       	adc	r23, r23
 2b8:	9a 95       	dec	r25
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_VoidSetPinDir+0x60>
 2bc:	cb 01       	movw	r24, r22
 2be:	84 2b       	or	r24, r20
 2c0:	87 bb       	out	0x17, r24	; 23
 2c2:	08 95       	ret
 2c4:	47 b3       	in	r20, 0x17	; 23
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	b9 01       	movw	r22, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_VoidSetPinDir+0x7e>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	9a 95       	dec	r25
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_VoidSetPinDir+0x7a>
 2d6:	cb 01       	movw	r24, r22
 2d8:	80 95       	com	r24
 2da:	84 23       	and	r24, r20
 2dc:	87 bb       	out	0x17, r24	; 23
 2de:	08 95       	ret
 2e0:	85 ff       	sbrs	r24, 5
 2e2:	0d c0       	rjmp	.+26     	; 0x2fe <DIO_VoidSetPinDir+0xaa>
 2e4:	44 b3       	in	r20, 0x14	; 20
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_VoidSetPinDir+0x9e>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	9a 95       	dec	r25
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_VoidSetPinDir+0x9a>
 2f6:	cb 01       	movw	r24, r22
 2f8:	84 2b       	or	r24, r20
 2fa:	84 bb       	out	0x14, r24	; 20
 2fc:	08 95       	ret
 2fe:	44 b3       	in	r20, 0x14	; 20
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_VoidSetPinDir+0xb8>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	9a 95       	dec	r25
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_VoidSetPinDir+0xb4>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	84 23       	and	r24, r20
 316:	84 bb       	out	0x14, r24	; 20
 318:	08 95       	ret
 31a:	85 ff       	sbrs	r24, 5
 31c:	0d c0       	rjmp	.+26     	; 0x338 <DIO_VoidSetPinDir+0xe4>
 31e:	41 b3       	in	r20, 0x11	; 17
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_VoidSetPinDir+0xd8>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	9a 95       	dec	r25
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_VoidSetPinDir+0xd4>
 330:	cb 01       	movw	r24, r22
 332:	84 2b       	or	r24, r20
 334:	81 bb       	out	0x11, r24	; 17
 336:	08 95       	ret
 338:	41 b3       	in	r20, 0x11	; 17
 33a:	21 e0       	ldi	r18, 0x01	; 1
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	b9 01       	movw	r22, r18
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_VoidSetPinDir+0xf2>
 342:	66 0f       	add	r22, r22
 344:	77 1f       	adc	r23, r23
 346:	9a 95       	dec	r25
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_VoidSetPinDir+0xee>
 34a:	cb 01       	movw	r24, r22
 34c:	80 95       	com	r24
 34e:	84 23       	and	r24, r20
 350:	81 bb       	out	0x11, r24	; 17
 352:	08 95       	ret

00000354 <DIO_VoidWritePin>:
 354:	98 2f       	mov	r25, r24
 356:	96 95       	lsr	r25
 358:	96 95       	lsr	r25
 35a:	97 70       	andi	r25, 0x07	; 7
 35c:	28 2f       	mov	r18, r24
 35e:	23 70       	andi	r18, 0x03	; 3
 360:	22 30       	cpi	r18, 0x02	; 2
 362:	f1 f1       	breq	.+124    	; 0x3e0 <DIO_VoidWritePin+0x8c>
 364:	08 f0       	brcs	.+2      	; 0x368 <DIO_VoidWritePin+0x14>
 366:	59 c0       	rjmp	.+178    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 368:	21 30       	cpi	r18, 0x01	; 1
 36a:	e9 f0       	breq	.+58     	; 0x3a6 <DIO_VoidWritePin+0x52>
 36c:	86 ff       	sbrs	r24, 6
 36e:	0d c0       	rjmp	.+26     	; 0x38a <DIO_VoidWritePin+0x36>
 370:	4b b3       	in	r20, 0x1b	; 27
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_VoidWritePin+0x2a>
 37a:	66 0f       	add	r22, r22
 37c:	77 1f       	adc	r23, r23
 37e:	9a 95       	dec	r25
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_VoidWritePin+0x26>
 382:	cb 01       	movw	r24, r22
 384:	84 2b       	or	r24, r20
 386:	8b bb       	out	0x1b, r24	; 27
 388:	08 95       	ret
 38a:	4b b3       	in	r20, 0x1b	; 27
 38c:	21 e0       	ldi	r18, 0x01	; 1
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	b9 01       	movw	r22, r18
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_VoidWritePin+0x44>
 394:	66 0f       	add	r22, r22
 396:	77 1f       	adc	r23, r23
 398:	9a 95       	dec	r25
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_VoidWritePin+0x40>
 39c:	cb 01       	movw	r24, r22
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8b bb       	out	0x1b, r24	; 27
 3a4:	08 95       	ret
 3a6:	86 ff       	sbrs	r24, 6
 3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <DIO_VoidWritePin+0x70>
 3aa:	48 b3       	in	r20, 0x18	; 24
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	b9 01       	movw	r22, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_VoidWritePin+0x64>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	9a 95       	dec	r25
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_VoidWritePin+0x60>
 3bc:	cb 01       	movw	r24, r22
 3be:	84 2b       	or	r24, r20
 3c0:	88 bb       	out	0x18, r24	; 24
 3c2:	08 95       	ret
 3c4:	48 b3       	in	r20, 0x18	; 24
 3c6:	21 e0       	ldi	r18, 0x01	; 1
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	b9 01       	movw	r22, r18
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_VoidWritePin+0x7e>
 3ce:	66 0f       	add	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	9a 95       	dec	r25
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_VoidWritePin+0x7a>
 3d6:	cb 01       	movw	r24, r22
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	88 bb       	out	0x18, r24	; 24
 3de:	08 95       	ret
 3e0:	86 ff       	sbrs	r24, 6
 3e2:	0d c0       	rjmp	.+26     	; 0x3fe <DIO_VoidWritePin+0xaa>
 3e4:	45 b3       	in	r20, 0x15	; 21
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	b9 01       	movw	r22, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_VoidWritePin+0x9e>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	9a 95       	dec	r25
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_VoidWritePin+0x9a>
 3f6:	cb 01       	movw	r24, r22
 3f8:	84 2b       	or	r24, r20
 3fa:	85 bb       	out	0x15, r24	; 21
 3fc:	08 95       	ret
 3fe:	45 b3       	in	r20, 0x15	; 21
 400:	21 e0       	ldi	r18, 0x01	; 1
 402:	30 e0       	ldi	r19, 0x00	; 0
 404:	b9 01       	movw	r22, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	9a 95       	dec	r25
 40e:	e2 f7       	brpl	.-8      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 410:	cb 01       	movw	r24, r22
 412:	80 95       	com	r24
 414:	84 23       	and	r24, r20
 416:	85 bb       	out	0x15, r24	; 21
 418:	08 95       	ret
 41a:	86 ff       	sbrs	r24, 6
 41c:	0d c0       	rjmp	.+26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 41e:	42 b3       	in	r20, 0x12	; 18
 420:	21 e0       	ldi	r18, 0x01	; 1
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	b9 01       	movw	r22, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	9a 95       	dec	r25
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	cb 01       	movw	r24, r22
 432:	84 2b       	or	r24, r20
 434:	82 bb       	out	0x12, r24	; 18
 436:	08 95       	ret
 438:	42 b3       	in	r20, 0x12	; 18
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	9a 95       	dec	r25
 448:	e2 f7       	brpl	.-8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	82 bb       	out	0x12, r24	; 18
 452:	08 95       	ret

00000454 <DIO_VoidSetPortDir>:


//Function to control Ports
void DIO_VoidSetPortDir(uint8_t Port,uint8_t Port_Dir)
{
	switch(Port)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	41 f0       	breq	.+16     	; 0x468 <DIO_VoidSetPortDir+0x14>
 458:	28 f0       	brcs	.+10     	; 0x464 <DIO_VoidSetPortDir+0x10>
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	39 f0       	breq	.+14     	; 0x46c <DIO_VoidSetPortDir+0x18>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_VoidSetPortDir+0x1c>
 462:	08 95       	ret
	{
		case DIO_PORTA :
			DDRA = Port_Dir;
 464:	6a bb       	out	0x1a, r22	; 26
			break;
 466:	08 95       	ret
		case DIO_PORTB :
			DDRB = Port_Dir;
 468:	67 bb       	out	0x17, r22	; 23
			break;
 46a:	08 95       	ret
		case DIO_PORTC :
			DDRC = Port_Dir;
 46c:	64 bb       	out	0x14, r22	; 20
			break;
 46e:	08 95       	ret
		case DIO_PORTD :
			DDRD = Port_Dir;
 470:	61 bb       	out	0x11, r22	; 17
 472:	08 95       	ret

00000474 <DIO_VoidWritePort>:
	}
}

void DIO_VoidWritePort(uint8_t Port,uint8_t Port_Val)
{
	switch(Port)
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	41 f0       	breq	.+16     	; 0x488 <DIO_VoidWritePort+0x14>
 478:	28 f0       	brcs	.+10     	; 0x484 <DIO_VoidWritePort+0x10>
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	39 f0       	breq	.+14     	; 0x48c <DIO_VoidWritePort+0x18>
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_VoidWritePort+0x1c>
 482:	08 95       	ret
	{
		case DIO_PORTA :
			PORTA = Port_Val;
 484:	6b bb       	out	0x1b, r22	; 27
			break;
 486:	08 95       	ret
		case DIO_PORTB :
			PORTB = Port_Val;
 488:	68 bb       	out	0x18, r22	; 24
			break;
 48a:	08 95       	ret
		case DIO_PORTC :
			PORTC = Port_Val;
 48c:	65 bb       	out	0x15, r22	; 21
			break;
 48e:	08 95       	ret
		case DIO_PORTD :
			PORTD = Port_Val;
 490:	62 bb       	out	0x12, r22	; 18
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
